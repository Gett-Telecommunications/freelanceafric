rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /user_permissions/{document=**} {
      // Anybody can submit to the assessors collection if they are loggged in but only if the email being submitted belongs to them
      allow get: if ((request.auth.uid == resource.data.uid));
      allow read, write: if request.auth.token.isAdmin;
    }
    match /user_profiles/{user_uid} {
      allow read: if request.auth.uid == user_uid;
      allow write: if request.auth.uid == user_uid;

      match /favorites/{document=**} {
        allow read, write: if request.auth.uid == user_uid;
      }
    }
    match /files/{document=**} {
      // Any logged in person can create a file in the files collection
      allow create: if request.auth != null;
      // anyone can read files that are public
      allow get: if resource.data.route.matches('.*public/.*') || request.auth.token.isAdmin;
      // Anyone can view files uploaded by themselves
      allow read: if request.auth.uid == resource.data.uploadedBy;
      // Anyone can update files that are uploaded by them
      allow update, delete: if request.auth.uid == resource.data.uploadedBy;
    }
    match /categories/{document=**} {
      // anyone can read from the categories collection
      allow get, list: if true;
      // only admins can update and delete
      allow read, write: if request.auth.token.isAdmin;
    }
    match /seller_profiles/{user_uid} {
      // anyone can read from the seller profiles collection if the status is active
      allow get, list: if resource.data.status == 'active';
      // only admins can update and delete
      allow read, create, update: if (request.auth.token.isAdmin || request.auth.uid == user_uid);
      allow delete: if request.auth.token.isAdmin;
      match /drafts/profile {
        allow read, write: if request.auth.token.isAdmin || request.auth.uid == user_uid;
      }
      match /drafts/review {
        allow read, create, update: if request.auth.uid == user_uid ;
        allow read, delete: if request.auth.token.isAdmin ;
      }
      match /history/{id} {
        // allow someone to see their own history of published careers
        allow read: if request.auth.uid == resource.data.uid || request.auth.uid == request.resource.data.uid;
        // allow admins to see all history
        allow read, create: if request.auth.token.isAdmin;
      }
    }
    match /seller_careers/{document=**} {
      // anyone who is logged in can read from the seller profiles collection
      allow get: if request.auth != null;
      // only admins can list
      allow list: if request.auth.token.isAdmin;
      // only admins can update and delete
      allow read, write: if (request.auth.token.isAdmin || request.auth.uid == resource.data.uid || request.auth.uid == request.resource.data.uid);
      match /drafts/career {
        allow read, write: if request.auth.token.isAdmin || request.auth.uid == resource.data.uid || request.auth.uid == request.resource.data.uid;
      }
      match /drafts/review {
        allow read, create, update: if request.auth.uid == resource.data.uid || request.auth.uid == request.resource.data.uid;
        allow read, delete: if request.auth.token.isAdmin ;
      }
      match /history/{id} {
        // allow someone to see their own history of published careers
        allow read: if request.auth.uid == resource.data.uid || request.auth.uid == request.resource.data.uid;
        // allow admins to see all history
        allow read, create: if request.auth.token.isAdmin;
      }
    }
    match /gigs/{document=**} {
      // anyone can read from the gigs collection
      allow get, list: if true;
      // only admins can update and delete
      allow read, write: if request.auth.token.isSeller;
    }
    match /payments/{document=**} {
      // Any buyer can create a payment where the senderUID is the same as the user who created it
      allow create: if request.auth.uid == resource.data.senderUID;
      // Only the senderUID and admin can read payments
      allow get, list: if request.auth.uid == resource.data.senderUID || request.auth.token.isAdmin;
      // Nobody can update or delete payments
      allow update, delete: if false;
    }
    match /orders/{document=**} {
      // Any buyer can create a new order or any sender can send a new chat message
      allow create: if request.auth.uid == resource.data.buyerUID || request.auth.uid == resource.data.senderUID;
      // Only the buyerUID, the sellerUID and admin can read orders and update them
      allow get, update: if
        request.auth.uid == resource.data.buyerUID
        || request.auth.uid == resource.data.sellerUID
        || request.auth.uid == resource.data.senderUID
        || request.auth.token.isAdmin;
      // allow the buyer and seller to list
      allow list: if
        (request.auth.uid == resource.data.buyerUID)
        || (request.auth.uid == resource.data.sellerUID)
        || request.auth.uid == get(request.query.parent).data.buyerUID
        || request.auth.uid == get(request.query.parent).data.sellerUID;
      // Nobody can delete orders
      allow delete: if false;

      // subcollection of chats is only accessible to the buyers and sellers of the order
      match /chats/{chat} {
        allow read, write: if request.auth.uid == resource.data.buyerUID || request.auth.uid == resource.data.sellerUID;
      }
    }
  }
}
